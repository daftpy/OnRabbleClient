/*!
    \page clientguide.html
    \title Client Developer Guide
    \nextpage {keyprocesses.html}
    \previouspage {gettingstarted.html}

    \section1 Overview

    OnRabbleClient is a lightweight, extensible chat client designed for real-time communication
    over secure WebSocket connections. It is part of the OnRabble suite and integrates with a
    Go-based backend along with PostgreSQL and Keycloak for persistent data and user authentication.

    This guide offers a high-level overview of the core architecture, message flow, and types
    exposed to QML for declarative UI development.

    \section1 Architecture Overview

    OnRabbleClient follows a modular and event-driven architecture, structured around views, models,
    and manager classes. These components communicate via signals and are created dynamically based on
    the current authentication and connection state.

    The application separates responsibilities into layers:
    \list
        \li Discovery and authentication are handled in the main window
        \li Active chat sessions run in independent chat windows
        \li Session state, connection logic, and exposed models are encapsulated in \l ClientManager
    \endlist

    This design promotes:
    \list
        \li Clear separation between discovery, authentication, and messaging concerns
        \li Stateless QML views that react to model and signal updates
        \li Support for multiple concurrent chat windows with isolated session state
    \endlist

    See \l{keyprocesses.html} for a detailed walkthrough of how discovery, authentication, and
    chat windows are initialized.

    \section1 Key Processes

    These pages describe the core operations that govern the OnRabbleClient lifecycle, from
    selecting a server to authenticating and establishing a real-time connection.

    Each phase corresponds to a distinct part of the overall flow:

    \div {class="list"}
    \list
        \li \l {discoveryflow.html} — How servers are discovered via URLs
        \li \l {authenticationflow.html} — How users authenticate and receive access tokens
        \li \l {connectionflow.html} — How chat connections are established and managed
    \endlist
    \enddiv

    \section1 Core Components

    These classes form the backbone of the system and are available to QML:

    \div {class="list"}
    \list
        \li \l {DiscoveryManager} — Initiates discovery of valid chat server configurations
        \li \l {AuthManager} — Manages authentication flow and the provision of the access token
        \li \l {ClientManager} — Manages connection state, access tokens, and provides access to proxies
        \li \l {MessageBroker} — Parses inbound messages and emits typed signals and model updates
    \endlist
    \enddiv

    \section1 Payload Types

    Payloads are small, structured data types deserialized from JSON. They represent messages,
    channels, user identity, and other server-side entities.

    See \l {payloads.html} for a categorized overview of all payload types.

    \section1 Data Models

    Models in OnRabbleClient serve as reactive data sources for QML views. These are all subclasses of
    \l QAbstractListModel or \l QSortFilterProxyModel, and expose access to chat messages,
    channels, and filtered message views.

    Models do not handle validation or persistence; their sole responsibility is to represent
    and organize in-memory data for UI components to display. Data is inserted into these models
    by controller components such as \l ClientManager or \l MessageBroker.

    See \l {models.html} for a categorized breakdown of all models.

    \section1 Extending the System

    To support new behaviors or message types:

    \div {class="list"}
    \list
        \li Add parsing logic to \c MessageBroker::processMessage()
        \li Create a new payload struct if needed
        \li Update a model or emit a new signal
        \li Expose the result to QML if appropriate
    \endlist
    \enddiv

    \note QML views automatically react to changes in exposed models and signals when bound properly.

    \sa ClientManager, MessageBroker, DiscoveryManager, {payloads.html}, {authenticationflow.html}


*/
