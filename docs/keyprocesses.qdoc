/*!
    \page keyprocesses.html
    \title Key Processes
    \nextpage {payloads.html}
    \previouspage {clientguide.html}
    \keyword discovery
    \keyword authentication
    \keyword connection
    \keyword startup

    \section1 Overview

    This section introduces the three foundational processes that define how the client connects
    to a chat server: discovery, authentication, and connection establishment.

    These steps are performed in sequence and drive the application lifecycle, resulting in one or
    more independent chat windows â€” each powered by its own \l ClientManager instance.

    \section1 Lifecycle Summary

    \list
        \li The main window creates and holds a \l DiscoveryManager and shows a discovery page
        \li When a server is selected, a stack view pushes an embedded authentication browser and \l AuthManager
        \li Upon successful login, an access token is emitted and passed into a newly created chat window
        \li Each chat window owns its own \l ClientManager, which manages connection state and exposes models
    \endlist

    \note Discovery and authentication always occur in the main window. Chat windows are only created
    after a valid access token is received.

    \section1 Process Breakdown

    \section2 \l{discoveryflow.html}{Discovery}

    Discovery begins the client session. When the user enters a server URL, the \l DiscoveryManager retrieves
    server metadata such as WebSocket and OAuth endpoints. This data is required to initialize both the
    authentication flow and the later WebSocket connection.

    \section2 \l{authenticationflow.html}{Authentication}

    Authentication uses OAuth2 via an embedded browser. Once the discovery metadata is loaded, an \l AuthManager
    is created and presented alongside the browser. When authentication completes, an access token is emitted
    and handed off to the connection layer.

    \section2 \l{connectionflow.html}{Connection}

    After authentication, a new chat window is created. It owns a \l ClientManager instance which establishes
    a WebSocket connection using the discovered endpoints and received token. This manager handles
    real-time messaging and exposes filtered models for QML binding.

    \sa discoveryflow.html, authenticationflow.html, connectionflow.html, clientguide.html
*/
